// <auto-generated />
using System;
using Diet.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Diet.Migrations.Postgre
{
    [DbContext(typeof(PostgreContext))]
    [Migration("20181122073127_Weight")]
    partial class Weight
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-preview1-35029")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Diet.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("GenderId");

                    b.Property<decimal>("Goal");

                    b.Property<double>("Height");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<decimal>("PhysicalActivityLevel");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Diet.Models.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("FoodId");

                    b.Property<double>("Quantity");

                    b.Property<int>("UnitId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("Diet.Models.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Alcohol");

                    b.Property<double>("AlphaLinolenicAcid");

                    b.Property<double>("AlphaTocopherol");

                    b.Property<double>("Ash");

                    b.Property<double>("BetaCarotene");

                    b.Property<double>("Caffeine");

                    b.Property<double>("Calcium");

                    b.Property<double>("Carbohydrates");

                    b.Property<double>("Cholesterol");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<double>("Dencity");

                    b.Property<double>("DietaryFibre");

                    b.Property<double>("EnergyKJ");

                    b.Property<double>("Iodine");

                    b.Property<double>("Iron");

                    b.Property<double>("LinoleicAcid");

                    b.Property<double>("Magnesium");

                    b.Property<double>("Niacin");

                    b.Property<double>("NiacinEquivalents");

                    b.Property<double>("Phosphorus");

                    b.Property<double>("Potassium");

                    b.Property<double>("Protein");

                    b.Property<double>("ProvitaminA");

                    b.Property<double>("Retinol");

                    b.Property<double>("Riboflavin");

                    b.Property<double>("Selenium");

                    b.Property<double>("Sodium");

                    b.Property<double>("Starch");

                    b.Property<double>("Thiamin");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<double>("TotalFat");

                    b.Property<double>("TotalFolates");

                    b.Property<double>("TotalMonounsaturatedFat");

                    b.Property<double>("TotalOmega3FattyAcids");

                    b.Property<double>("TotalPolyunsaturatedFat");

                    b.Property<double>("TotalSaturatedFat");

                    b.Property<double>("TotalSugars");

                    b.Property<double>("TotalTransFattyAcids");

                    b.Property<double>("Tryptophan");

                    b.Property<double>("VitaminA");

                    b.Property<double>("VitaminB12");

                    b.Property<double>("VitaminB6");

                    b.Property<double>("VitaminC");

                    b.Property<double>("VitaminE");

                    b.Property<double>("Water");

                    b.Property<double>("Zinc");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("Diet.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Factor0");

                    b.Property<double>("Factor1");

                    b.Property<double>("Factor2");

                    b.Property<string>("Name");

                    b.Property<double>("Term");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Diet.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<double>("Factor");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Symbol")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Unit");
                });

            modelBuilder.Entity("Diet.Models.WeightEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("UserId");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WeightEntries");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Diet.Models.MassUnit", b =>
                {
                    b.HasBaseType("Diet.Models.Unit");


                    b.ToTable("MassUnit");

                    b.HasDiscriminator().HasValue("MassUnit");
                });

            modelBuilder.Entity("Diet.Models.Meassure", b =>
                {
                    b.HasBaseType("Diet.Models.Unit");

                    b.Property<int>("FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("Meassure");

                    b.HasDiscriminator().HasValue("Meassure");
                });

            modelBuilder.Entity("Diet.Models.VolumeUnit", b =>
                {
                    b.HasBaseType("Diet.Models.Unit");


                    b.ToTable("VolumeUnit");

                    b.HasDiscriminator().HasValue("VolumeUnit");
                });

            modelBuilder.Entity("Diet.Models.ApplicationUser", b =>
                {
                    b.HasOne("Diet.Models.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Diet.Models.Entry", b =>
                {
                    b.HasOne("Diet.Models.Food", "Food")
                        .WithMany("Entries")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Diet.Models.Unit", "Unit")
                        .WithMany("Entries")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Diet.Models.ApplicationUser", "User")
                        .WithMany("Entries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Diet.Models.WeightEntry", b =>
                {
                    b.HasOne("Diet.Models.ApplicationUser", "User")
                        .WithMany("WeightEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Diet.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Diet.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Diet.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Diet.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Diet.Models.Meassure", b =>
                {
                    b.HasOne("Diet.Models.Food", "Food")
                        .WithMany("Meassures")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
